<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="2" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Demo Test Suite" duration-ms="2692" started-at="2021-04-01T21:31:45 EEST" finished-at="2021-04-01T21:31:48 EEST">
    <groups>
    </groups>
    <test name="TC_01_Domain" duration-ms="2692" started-at="2021-04-01T21:31:45 EEST" finished-at="2021-04-01T21:31:48 EEST">
      <class name="com.demo.tests.TestCase_01">
        <test-method status="PASS" signature="cleanReportData()[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643]" name="cleanReportData" is-config="true" duration-ms="3" started-at="2021-04-01T21:31:45 EEST" finished-at="2021-04-01T21:31:45 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanReportData -->
        <test-method status="PASS" signature="add_new_basket(java.lang.reflect.Method)[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643]" name="add_new_basket" duration-ms="2403" started-at="2021-04-01T21:31:45 EEST" description="API" finished-at="2021-04-01T21:31:47 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.demo.tests.TestCase_01.add_new_basket(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- add_new_basket -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestContext, org.testng.ITestResult)[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643]" name="generateReport" is-config="true" duration-ms="1" started-at="2021-04-01T21:31:47 EEST" finished-at="2021-04-01T21:31:47 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@383864d5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=add_new_basket status=SUCCESS method=TestCase_01.add_new_basket(java.lang.reflect.Method)[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="FAIL" signature="get_collected_requests(java.lang.reflect.Method)[pri:1, instance:com.demo.tests.TestCase_01@1e8b7643]" name="get_collected_requests" duration-ms="6" started-at="2021-04-01T21:31:47 EEST" description="API" finished-at="2021-04-01T21:31:47 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.demo.tests.TestCase_01.get_collected_requests(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[body cannot be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: body cannot be null
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
at com.jayway.restassured.internal.assertion.AssertParameter.notNull(AssertParameter.groovy:26)
at com.jayway.restassured.internal.assertion.AssertParameter$notNull.callStatic(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56)
at com.jayway.restassured.internal.assertion.AssertParameter$notNull.callStatic(Unknown Source)
at com.jayway.restassured.internal.RequestSpecificationImpl.body(RequestSpecificationImpl.groovy:611)
at com.jayway.restassured.builder.RequestSpecBuilder.setBody(RequestSpecBuilder.java:94)
at com.demo.config.RestAssuredConfig.requestSpecification(RestAssuredConfig.java:48)
at com.demo.scripts.GetCollectedRequests.getCollectedRequests(GetCollectedRequests.java:53)
at com.demo.tests.TestCase_01.get_collected_requests(TestCase_01.java:34)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.TestNG.privateMain(TestNG.java:1336)
at org.testng.TestNG.main(TestNG.java:1304)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_collected_requests -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestContext, org.testng.ITestResult)[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643]" name="generateReport" is-config="true" duration-ms="7" started-at="2021-04-01T21:31:47 EEST" finished-at="2021-04-01T21:31:47 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@383864d5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=get_collected_requests status=FAILURE method=TestCase_01.get_collected_requests(java.lang.reflect.Method)[pri:1, instance:com.demo.tests.TestCase_01@1e8b7643] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:com.demo.tests.TestCase_01@1e8b7643]" name="endReport" is-config="true" duration-ms="254" started-at="2021-04-01T21:31:47 EEST" finished-at="2021-04-01T21:31:48 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- com.demo.tests.TestCase_01 -->
    </test> <!-- TC_01_Domain -->
  </suite> <!-- Demo Test Suite -->
</testng-results>
